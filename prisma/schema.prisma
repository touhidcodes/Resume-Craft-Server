// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    userName  String     @unique
    email     String     @unique
    password  String
    role      UserRole
    status    UserStatus @default(ACTIVE)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Resume    Resume[]
    @@map("users")
}

enum UserRole {
    ADMIN
    USER
}

enum UserStatus {
    ACTIVE
    INACTIVE
}

model Template {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    image  String
    name   String
    Resume Resume[]
}

model Resume {
    id             String       @id @default(auto()) @map("_id") @db.ObjectId
    userId         String       @db.ObjectId
    user           User         @relation(fields: [userId], references: [id])
    templateId     String       @db.ObjectId
    template       Template     @relation(fields: [templateId], references: [id])
    personalInfo   PersonalInfo
    profileSummary String
    design         Design
    hobby          String[]
    language   Language[]
    allSection Section[]
    lastUpdated DateTime @updatedAt
    WorkExperience WorkExperience[]
    Education      Education[]
    Skill          Skill[]
    Certification  Certification[]
    Project        Project[]
    Award          Award[]
}

type Section {
    name     String
    isActive Boolean
}

type PersonalInfo {
    fullName String
    jobTitle String
    email    String
    phone    String
    website  String
    linkedin String
    github   String
    location String
}

type Language {
    name        String
    proficiency String
}

type Design {
    font            String
    themeColor      String
    backgroundColor String
    sectionStyles   SectionStyles
}

type SectionStyles {
    header Style
    titles Style
}

type Style {
    fontSize String
    color    String
}

// workExperience
model WorkExperience {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    resumeId         String    @db.ObjectId
    resume           Resume    @relation(fields: [resumeId], references: [id])
    companyName      String
    jobTitle         String
    startDate        DateTime
    endDate          DateTime?
    location         String
    responsibilities String?
}

model Education {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    resumeId    String    @db.ObjectId
    resume      Resume    @relation(fields: [resumeId], references: [id])
    institution String
    degree      String
    startDate   DateTime
    endDate     DateTime?
    location    String
    description String?
}

model Skill {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    resumeId String   @db.ObjectId
    resume   Resume   @relation(fields: [resumeId], references: [id])
    category String
    skills   String[]
}

model Certification {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    resumeId        String    @db.ObjectId
    resume          Resume    @relation(fields: [resumeId], references: [id])
    name            String
    issuer          String
    issueDate       DateTime
    expirationDate  DateTime?
    certificateLink String?
}

model Project {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    resumeId     String   @db.ObjectId
    resume       Resume   @relation(fields: [resumeId], references: [id])
    name         String
    description  String?
    technologies String[]
    role         String
    link         String
}

model Award {
    id           String  @id @default(auto()) @map("_id") @db.ObjectId
    resumeId     String  @db.ObjectId
    resume       Resume  @relation(fields: [resumeId], references: [id])
    name         String
    organization String
    year         Int
    description  String?
}
